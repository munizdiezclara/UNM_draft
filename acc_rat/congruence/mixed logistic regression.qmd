---
title: "binomial regrssion"
format: docx
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(afex)
library(BayesFactor)
library(apa)
library(emmeans)
library(rstatix)
library("writexl")

library(GGally)
library(reshape2)
library(lme4)
library(boot)
library(lattice)

options(scipen=999)

# function to force scientific formatting of numbers (used for large BFs)
changeSciNot <- function(n) {
  output <- format(n, scientific = TRUE, digits = 2) #Transforms the number into scientific notation even if small
  output <- sub("e", "x10^", output) #Replace e with 10^
  output <- sub("\\+0?", "", output) #Remove + symbol and leading zeros on exponent, if > 1
  output <- sub("-0?", "-", output) #Leaves - symbol but removes leading zeros on exponent, if < 1
  output <- paste0(output,"^")
  # output = strsplit(output, "^", fixed = TRUE)
  # output = paste0(output[[1]][1],"^", output[[1]][2], "^")
  output
}
# function to extract and report BFs with error %s
report_BF_and_error <- function(BF_in, sci_not = FALSE, hyp = "alt"){
  
  if (hyp == "alt") {
    BF_notation = "BF~10~ = "
  } else if (hyp == "null") {
    BF_notation = "BF~01~ = "
  }
  
  if (sci_not == TRUE) {
    BF_value = changeSciNot(extractBF(BF_in)$bf) # change to sci notation
  } else {
    BF_value = round(extractBF(BF_in)$bf,2) # otherwise round
  }
  
  paste0(BF_notation, 
         BF_value, 
         " &plusmn; ", 
         round(100*extractBF(BF_in)$error,2), 
         "%")
}
```

# Exp 3

```{r, include=FALSE}
load("../../UNM08_proc_data.RData")
UNM08_training <- rbind(stage1, stage2)
UNM08_training <- filter(UNM08_training, !pNum %in% not_passed_pNum$pNum)
UNM08_test <- filter(test, !pNum %in% not_passed_pNum$pNum)

UNM08_test <- UNM08_test %>%
  mutate(trial_type = case_when((target == 1 & distractor == 2) | (target == 2 & distractor == 1) | (target == 3 & distractor == 4) | (target == 4 & distractor == 3) ~ "P-Con" ,
                                (target == 5 & distractor == 6) | (target == 6 & distractor == 5) |  (target == 7 & distractor == 8) | (target == 8 & distractor == 7)~ "NP-Con",
                                (target == 1 & (distractor == 5 | distractor == 6)) | (target == 2 & (distractor == 5 | distractor == 6)) | (target == 3 & (distractor == 7 | distractor == 8)) | (target == 4 & (distractor == 7 | distractor == 8)) ~ "P-Incon",
                                  (target == 5 & (distractor == 1 | distractor == 2)) | (target == 6 & (distractor == 1 | distractor == 2)) | (target == 7 & (distractor == 3 | distractor == 4)) | (target == 8 & (distractor == 3 | distractor == 4)) ~  "NP-Incon"),
         #add a congruence variable
         congruence = case_when ((trial_type == "P-Con") | (trial_type == "NP-Con") ~ "congruent",
                                 (trial_type == "P-Incon") | (trial_type == "NP-Incon") ~ "incongruent"))

#create the PPR measure
UNM08_training <- UNM08_training %>%
  mutate(prob_response = case_when((cue1 == 1 | cue1 == 3) & response == "o1_image" ~ 1,
                                   (cue1 == 1 | cue1 == 3) & response == "o2_image" ~ 0, 
                                   (cue1 == 2 | cue1 == 4) & response == "o1_image" ~ 0,
                                   (cue1 == 2 | cue1 == 4) & response == "o2_image" ~ 1))
```

## RT analysis and exclusions

```{r, include=FALSE}
UNM08_test <- UNM08_test %>% 
  mutate(trial = rep(seq(1, 24), (nrow(UNM08_test)/24)))

mean_SDV <- UNM08_test %>%
  summarise(mean = mean(choice_RT),
            sd = sd(choice_RT)) %>%
  mutate(upper_limit = mean + (2.5 * sd),
         lower_limit = mean - (2.5 * sd))

# Calculate mean, sd, and limits by participant
p_mean_SDV <- UNM08_test %>%
  group_by(pNum) %>%
  summarise(mean = mean(choice_RT),
            sd = sd(choice_RT)) %>%
  mutate(upper_limit = mean + (2.5 * sd),
         lower_limit = mean - (2.5 * sd))

#identify participants that deviate in their mean from the mean of the group
p_outliers_RT <- UNM08_test %>% 
  mutate(is_excluded = choice_RT < mean_SDV[[1,4]] | choice_RT > mean_SDV[[1,3]])%>%
  group_by(pNum) %>%
  summarise(n_excluded = sum(is_excluded)) %>% 
  mutate(p_excluded = n_excluded/24)

# Join limits back to original data, filter, and calculate exclusion frequency and proportion
UNM08_test_excluded <- UNM08_test %>%
  mutate(is_excluded = choice_RT < mean_SDV$lower_limit | choice_RT > mean_SDV$upper_limit)%>%
  group_by(pNum) %>%
  summarise(n_excluded = sum(is_excluded)) %>% 
  mutate(p_excluded = n_excluded/24)

p_more2_exc <- UNM08_test_excluded %>% 
  filter(n_excluded>2)

# Join limits back to original data, and filter out the trials beyond the upper and lower limits
UNM08_test_filtered <- UNM08_test %>%
  mutate(is_excluded = choice_RT < mean_SDV[[1,4]] | choice_RT > mean_SDV[[1,3]])%>%
  filter(is_excluded == FALSE)%>%
  filter(!pNum %in% p_more2_exc$pNum)
```

```{r, include=FALSE}
UNM08_test_cRT <- UNM08_test_filtered %>% 
  group_by(pNum, trial) %>% 
  summarise(RT = mean(choice_RT))
```

```{r, echo=FALSE, message=FALSE}
ggplot() +
  geom_boxplot(data = UNM08_test_cRT, mapping = aes(x= trial, y = RT, group = trial))
ggplot() +
  geom_histogram(data = UNM08_test_cRT, mapping = aes(x=RT))
```

```{r, include=FALSE}
UNM08_test_rRT <- UNM08_test_filtered %>% 
  group_by(pNum) %>% 
  summarise(RT = mean(rating_RT))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = UNM08_test_rRT, mapping = aes(y = RT)) +
  geom_boxplot()
```

## Accuracy

```{r, include=FALSE}
#Calculate the mean accuracy and standard error for each block, including the groups
MA_UNM08_test <- UNM08_test_filtered %>%
  group_by(trial_type, condition) %>%
  summarise(mean_acc = mean(acc, na.rm = TRUE), 
            se_acc = sd(acc, na.rm = TRUE)/sqrt(length(acc)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = MA_UNM08_test, mapping = aes(x = factor(condition, level=c('Uncertain', 'Certain Short','Certain Long')), y = mean_acc, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(y= mean_acc, ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .2, position = position_dodge(0.9)) +
  coord_cartesian(ylim = c(0, 1))+
  scale_x_discrete (name = "Type of test") +
  scale_y_continuous(name = "Accuracy") +
  coord_cartesian(ylim = c(0.5, 1)) +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
acc_model <- glmer(acc ~ condition + predictiveness + congruence + (1 | pNum), data = UNM08_test, family = binomial)
acc_model
acc_se <- sqrt(diag(vcov(acc_model)))
(acc_tab <- cbind(Est = fixef(acc_model), LL = fixef(acc_model) - 1.96 * acc_se, UL = fixef(acc_model) + 1.96 *
    acc_se))
exp(acc_tab)
```
