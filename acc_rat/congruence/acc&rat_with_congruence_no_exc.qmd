---
title: "acc&rat_with_congruence"
format: docx
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(afex)
library(BayesFactor)
library(apa)
library(emmeans)
library(papaja)
library(rstatix)
library("writexl")
options(scipen=999)

# function to force scientific formatting of numbers (used for large BFs)
changeSciNot <- function(n) {
  output <- format(n, scientific = TRUE, digits = 2) #Transforms the number into scientific notation even if small
  output <- sub("e", "x10^", output) #Replace e with 10^
  output <- sub("\\+0?", "", output) #Remove + symbol and leading zeros on exponent, if > 1
  output <- sub("-0?", "-", output) #Leaves - symbol but removes leading zeros on exponent, if < 1
  output <- paste0(output,"^")
  # output = strsplit(output, "^", fixed = TRUE)
  # output = paste0(output[[1]][1],"^", output[[1]][2], "^")
  output
}
# function to extract and report BFs with error %s
report_BF_and_error <- function(BF_in, sci_not = FALSE, hyp = "alt"){
  
  if (hyp == "alt") {
    BF_notation = "BF~10~ = "
  } else if (hyp == "null") {
    BF_notation = "BF~01~ = "
  }
  
  if (sci_not == TRUE) {
    BF_value = changeSciNot(extractBF(BF_in)$bf) # change to sci notation
  } else {
    BF_value = round(extractBF(BF_in)$bf,2) # otherwise round
  }
  
  paste0(BF_notation, 
         BF_value, 
         " &plusmn; ", 
         round(100*extractBF(BF_in)$error,2), 
         "%")
}
```

# Exp 1

```{r, include=FALSE}
load("../../UNM05_proc_data.RData")
#Clean participants that did not pass check 2 and/or 3
training <- filter(training, !pNum %in% not_passed_pNum)
test1 <- filter(test1, !pNum %in% not_passed_pNum)
#add a group variable
test1 <- test1 %>%
  mutate(group = case_when(session == 1 ~ "High",
                                session == 2 ~ "Medium",
                                session == 3 ~ "Low"))
test2 <- filter(test2, !pNum %in% not_passed_pNum)
#add a group variable
test2 <- test2 %>%
  mutate(group = case_when(session == 1 ~ "High",
                                session == 2 ~ "Medium",
                                session == 3 ~ "Low"))
```

## RT analysis and exclusions

```{r, include=FALSE}
test1 <- test1 %>% 
  mutate(trial = rep(seq(1, 24), (nrow(test1)/24)))

test1_mean_SDV <- test1 %>%
  summarise(mean = mean(choice_RT),
            sd = sd(choice_RT)) %>%
  mutate(upper_limit = mean + (2.5 * sd),
         lower_limit = mean - (2.5 * sd))

# Calculate mean, sd, and limits by participant
test1_p_mean_SDV <- test1 %>%
  group_by(pNum) %>%
  summarise(mean = mean(choice_RT),
            sd = sd(choice_RT)) %>%
  mutate(upper_limit = mean + (2.5 * sd),
         lower_limit = mean - (2.5 * sd))

#identify participants that deviate in their mean from the mean of the group
test1_p_outliers_RT <- test1 %>% 
  mutate(is_excluded = choice_RT < test1_mean_SDV[[1,4]] | choice_RT > test1_mean_SDV[[1,3]])%>%
  group_by(pNum) %>%
  summarise(n_excluded = sum(is_excluded)) %>% 
  mutate(p_excluded = n_excluded/24)

test1_p_exc <- test1_p_outliers_RT %>% 
  filter(n_excluded>0)

# Join limits back to original data, and filter out the trials beyond the upper and lower limits
test1_filtered <- test1 %>%
  mutate(is_excluded = choice_RT < test1_mean_SDV[[1,4]] | choice_RT > test1_mean_SDV[[1,3]])%>%
  filter(is_excluded == FALSE)%>%
  filter(!pNum %in% test1_p_exc$pNum)
```

## Test1

### Accuracy

```{r, include=FALSE}
#Calculate the mean accuracy and standard error for each block, including the groups
MA_test1 <- test1_filtered %>%
  group_by(predictiveness, group) %>%
    summarise(mean_acc = mean(acc, na.rm = TRUE), 
            se_acc = sd(acc, na.rm = TRUE)/sqrt(length(acc)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = MA_test1, mapping = aes(x = factor(group, levels = c("High", "Medium", "Low")), y = mean_acc, fill = predictiveness)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(y= mean_acc, ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .2, position = position_dodge(0.9)) +
  coord_cartesian(ylim = c(0, 1))+
  scale_x_discrete (name = "Type of test") +
  scale_y_continuous(name = "Accuracy") +
  coord_cartesian(ylim = c(0.5, 1)) +
  scale_fill_discrete(type = c("#AF8DC3", "#7FBF7B"))+
  labs(title = "Mean accuracy for each type of cue in test1 phase")
```
## Test2

### Accuracy

```{r, include=FALSE}
#add a group variable
test2 <- test2 %>%
  mutate(group = case_when(session == 1 ~ "High",
                                session == 2 ~ "Medium",
                                session == 3 ~ "Low"), 
         trial_type = case_when((target == 1 & distractor_test2 == 2) | (target == 2 & distractor_test2 == 1) ~ "P-Con" ,
                                (target == 5 & distractor_test2 == 6) | (target == 6 & distractor_test2 == 5) ~ "NP-Con",
                                (target == 1 & (distractor_test2 == 5 | distractor_test2 == 6)) | (target == 2 & (distractor_test2 == 5 | distractor_test2 == 6)) ~ "P-Incon",
                                  (target == 5 & (distractor_test2 == 1 | distractor_test2 == 2)) | (target == 6 & (distractor_test2 == 1 | distractor_test2 == 2)) ~  "NP-Incon"),
         #add a congruence variable
         congruence = case_when ((trial_type == "P-Con") | (trial_type == "NP-Con") ~ "congruent",
                                 (trial_type == "P-Incon") | (trial_type == "NP-Incon") ~ "incongruent"))
#plot test accuracy
m_acc_test2 <- test2 %>%
  group_by(trial_type, group) %>%
  summarise(mean_acc = mean(acc, na.rm = TRUE), 
            se_acc = sd(acc, na.rm = TRUE)/sqrt(length(acc)))
```

```{r, echo = FALSE, message=FALSE}
ggplot(data = m_acc_test2, mapping = aes(x = factor(group, levels = c("High", "Medium", "Low")), y = mean_acc, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width=.2, position=position_dodge(0.9)) +
  scale_x_discrete (name = "Similarity") +
  scale_y_continuous(name = "Rating") +
  coord_cartesian(ylim = c(0.5, 1)) +
  labs(fill = "Trial type")+
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))+
  labs(title = "Mean accuracy for each type of cue in test2 phase")
```

```{r, include=FALSE}
#ANOVA accuracy
acc_test2 <- test2 %>%
  group_by (pNum, group, predictiveness, congruence) %>%
  summarise(acc = mean(acc, na.rm = TRUE))
acc_test2$predictiveness <- factor(acc_test2$predictiveness)
acc_test2$group <- factor(acc_test2$group)
acc_test2$pNum <- factor(acc_test2$pNum)
acc_test2$congruence <- factor(acc_test2$congruence)
ANOVA_acc_test2 <- aov_car(formula = acc ~ group + Error(pNum*predictiveness*congruence), data = acc_test2)
print(ANOVA_acc_test2)

bay_ANOVA_acc_test2 <- anovaBF(formula = acc ~ group*predictiveness*congruence + pNum,
        data = data.frame(acc_test2),
        whichRandom = "pNum")
print(bay_ANOVA_acc_test2)

bay_ANOVA_acc_test2_sxp <- bay_ANOVA_acc_test2[4]/bay_ANOVA_acc_test2[3]
print(bay_ANOVA_acc_test2_sxp)
bay_ANOVA_acc_test2_pxc <- bay_ANOVA_acc_test2[13]/bay_ANOVA_acc_test2[7]
print(bay_ANOVA_acc_test2_pxc)
bay_ANOVA_acc_test2_sxc <- bay_ANOVA_acc_test2[10]/bay_ANOVA_acc_test2[6]
print(bay_ANOVA_acc_test2_sxc)
bay_ANOVA_acc_test2_sxpxc <- bay_ANOVA_acc_test2[18]/bay_ANOVA_acc_test2[17]
print(bay_ANOVA_acc_test2_sxpxc)
```

There are no significant differences due to any effect or interaction in accuracy in the second test. Except for those that did the very subtle test, all subjects had lower accuracy for the non predictive vs the predictive targets. However, there are no significant effects: *similarity* : `r apa(ANOVA_acc_test2, effect = "group")`, `r report_BF_and_error(bay_ANOVA_acc_test2[1])`; *predictiveness*: `r apa(ANOVA_acc_test2, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_acc_test2[2])`; *congruence*: `r apa(ANOVA_acc_test2, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_acc_test2[5])`; *similarity x predictiveness*: `r apa(ANOVA_acc_test2, effect = "group:predictiveness")`, `r report_BF_and_error(bay_ANOVA_acc_test2_sxp[1])`; *predictiveness x congruence*: `r apa(ANOVA_acc_test2, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_test2_pxc[1])`; *similarity x congruence*: `r apa(ANOVA_acc_test2, effect = "group:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_test2_sxc[1])`; *similarity x predictiveness x congruence*: `r apa(ANOVA_acc_test2, effect = "group:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_test2_sxpxc[1])`.

###Just correct ratings

```{r, include=FALSE}
#plot test accuracy
m_rat_test2 <- filter(test2, acc == 1) %>%
  group_by(trial_type, group) %>%
  summarise(mean_rat = mean(mem_score, na.rm = TRUE), 
            se_rat = sd(mem_score, na.rm = TRUE)/sqrt(length(mem_score)))
```

```{r, echo = FALSE, message=FALSE}
ggplot(data = m_rat_test2, mapping = aes(x = factor(group, levels = c("High", "Medium", "Low")), y = mean_rat, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(ymin = mean_rat - se_rat, ymax = mean_rat + se_rat), width=.2, position=position_dodge(0.9)) +
  scale_x_discrete (name = "Similarity") +
  scale_y_continuous(name = "Rating") +
  labs(fill = "Trial type")+
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))+
  labs(title = "Mean rating for each type of cue in test2 phase")
```

```{r, include=FALSE}
#ANOVA rat
rat_test2 <- filter(test2, acc ==1) %>%
  group_by (pNum, group, predictiveness, congruence) %>%
  summarise(rat = mean(mem_score, na.rm = TRUE))
rat_test2$predictiveness <- factor(rat_test2$predictiveness)
rat_test2$group <- factor(rat_test2$group)
rat_test2$pNum <- factor(rat_test2$pNum)
rat_test2$congruence <- factor(rat_test2$congruence)
ANOVA_rat_test2 <- aov_car(formula = rat ~ group + Error(pNum*predictiveness*congruence), data = rat_test2)
print(ANOVA_rat_test2)

bay_ANOVA_rat_test2 <- anovaBF(formula = rat ~ group*predictiveness*congruence + pNum,
        data = data.frame(rat_test2),
        whichRandom = "pNum")
print(bay_ANOVA_rat_test2)

bay_ANOVA_rat_test2_sxp <- bay_ANOVA_rat_test2[4]/bay_ANOVA_rat_test2[3]
print(bay_ANOVA_rat_test2_sxp)
bay_ANOVA_rat_test2_pxc <- bay_ANOVA_rat_test2[13]/bay_ANOVA_rat_test2[7]
print(bay_ANOVA_rat_test2_pxc)
bay_ANOVA_rat_test2_sxc <- bay_ANOVA_rat_test2[10]/bay_ANOVA_rat_test2[6]
print(bay_ANOVA_rat_test2_sxc)
bay_ANOVA_rat_test2_sxpxc <- bay_ANOVA_rat_test2[18]/bay_ANOVA_rat_test2[17]
print(bay_ANOVA_rat_test2_sxpxc)
```

When the confidence ratings for the correct options were analysed, there was a clear effect of predictiveness, *predictiveness*: `r apa(ANOVA_rat_test2, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2[2])`. The rest of the main effects and interactions were not significant: *similarity* : `r apa(ANOVA_rat_test2, effect = "group")`, `r report_BF_and_error(bay_ANOVA_rat_test2[1])`; ; *congruence*: `r apa(ANOVA_rat_test2, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2[5])`; *similarity x predictiveness*: `r apa(ANOVA_rat_test2, effect = "group:predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2_sxp[1])`; *predictiveness x congruence*: `r apa(ANOVA_rat_test2, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_pxc[1])`; *similarity x congruence*: `r apa(ANOVA_rat_test2, effect = "group:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_sxc[1])`; *similarity x predictiveness x congruence*: `r apa(ANOVA_rat_test2, effect = "group:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_sxpxc[1])`

#### Group Low

```{r, include = FALSE}
rat_test2_L <- filter(test2, acc == 1 & group == "Low") %>%
  group_by (pNum, predictiveness, congruence) %>%
  summarise(rat = mean(mem_score, na.rm = TRUE))
rat_test2_L$pNum <- factor(rat_test2_L$pNum)
rat_test2_L$predictiveness <- factor(rat_test2_L$predictiveness)
rat_test2_L$congruence <- factor(rat_test2_L$congruence)
# ANOVA with two within factors
ANOVA_rat_test2_L <- aov_car(rat ~ predictiveness*congruence + Error(pNum/predictiveness*congruence), data=rat_test2_L)
print(ANOVA_rat_test2_L)
#bayesian ANOVA
bay_ANOVA_rat_test2_L <- anovaBF(formula = rat ~ congruence*predictiveness + pNum,
                                    data = data.frame(rat_test2_L),
                                    whichRandom = "pNum")
print(bay_ANOVA_rat_test2_L)
bay_ANOVA_rat_test2_L_int <- bay_ANOVA_rat_test2_L[4]/bay_ANOVA_rat_test2_L[3]
print(bay_ANOVA_rat_test2_L_int)
```

No significant effects or interactions were found in group Low similarity: *predictiveness*, `r apa(ANOVA_rat_test2_L, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2_L[1])`, nor of *congruence*, `r apa(ANOVA_rat_test2_L, effect = "congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_L[2])` and no interaction, `r apa(ANOVA_rat_test2_L, effect = "group:predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2_L_int[1])`.

#### Group Medium

```{r, include = FALSE}
rat_test2_M <- filter(test2, acc == 1 & group == "Medium") %>%
  group_by (pNum, predictiveness, congruence) %>%
  summarise(rat = mean(mem_score, na.rm = TRUE))
rat_test2_M$pNum <- factor(rat_test2_M$pNum)
rat_test2_M$predictiveness <- factor(rat_test2_M$predictiveness)
rat_test2_M$congruence <- factor(rat_test2_M$congruence)
# ANOVA with two within factors
ANOVA_rat_test2_M <- aov_car(rat ~ predictiveness*congruence + Error(pNum/predictiveness*congruence), data=rat_test2_M)
print(ANOVA_rat_test2_M)
#bayesian ANOVA
bay_ANOVA_rat_test2_M <- anovaBF(formula = rat ~ congruence*predictiveness + pNum,
                                   data = data.frame(rat_test2_M),
                                   whichRandom = "pNum")
print(bay_ANOVA_rat_test2_M)
bay_ANOVA_rat_test2_M_int <- bay_ANOVA_rat_test2_M[4]/bay_ANOVA_rat_test2_M[3]
print(bay_ANOVA_rat_test2_M_int)
```

For group Medium, there was also no effect of *predictiveness*: `r apa(ANOVA_rat_test2_M, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2_M[1])`, *congruence*: `r apa(ANOVA_rat_test2_M, effect = "congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_M[2])`, and no interaction *group x predictiveness*: `r apa(ANOVA_rat_test2_M, effect = "group:predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2_M_int[1])`).

#### Group High

```{r, include = FALSE}
rat_test2_H <- filter(test2, acc == 1 & group == "High") %>%
  group_by (pNum, predictiveness, congruence) %>%
  summarise(rat = mean(mem_score, na.rm = TRUE))
rat_test2_H$pNum <- factor(rat_test2_H$pNum)
rat_test2_H$predictiveness <- factor(rat_test2_H$predictiveness)
rat_test2_H$congruence <- factor(rat_test2_H$congruence)
# ANOVA with two within factors
ANOVA_rat_test2_H <- aov_car(rat ~ predictiveness*congruence + Error(pNum/predictiveness*congruence), data=rat_test2_H)
print(ANOVA_rat_test2_H)
#bayesian ANOVA
bay_ANOVA_rat_test2_H <- anovaBF(formula = rat ~ congruence*predictiveness + pNum,
                                    data = data.frame(rat_test2_H),
                                    whichRandom = "pNum")
print(bay_ANOVA_rat_test2_H)
bay_ANOVA_rat_test2_H_int <- bay_ANOVA_rat_test2_H[4]/bay_ANOVA_rat_test2_H[3]
print(bay_ANOVA_rat_test2_H_int)
```

```{r, include = FALSE}
# SME
#calculate the simple main effect of congruence
sme_rat_test2_H_congruence <- rat_test2_H %>%
  group_by(predictiveness) %>%
  anova_test(rat ~ congruence + Error(pNum/congruence), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_rat_test2_H_congruence #Call the output table
#calculate the simple main effect of predictiveness
sme_rat_test2_H_pred <- rat_test2_H %>%
  group_by(congruence) %>%
  anova_test(rat ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_rat_test2_H_pred #Call the output table
```

For group High there was a significant effect of *predictiveness*, `r apa(ANOVA_rat_test2_H, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_test2_H[1])`, and an effect of the *predictiveness x congruence*, `r apa(ANOVA_rat_test2_H, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_H_int[1])`, but no main effect of *congruence*, `r apa(ANOVA_rat_test2_H, effect = "congruence")`, `r report_BF_and_error(bay_ANOVA_rat_test2_H[2])`. The main effect of predictiveness was significant in both the congruent, *F* (1, 28) = 16.961, *p* \< .001, $\\eta^2_p$ = .377, and incongruent trials, *F* (1, 28) = 9.490, *p* = .008, $\\eta^2_p$ = .247. However, there was an effect of congruence in predictive trials, *F* (1, 28) = 7.457, *p* = .022, $\\eta^2_p$ = .21, but not on the non-predictive trials, *F* (1, 28) = 0.654, *p* = .852, $\\eta^2_p$ = .023.

# Exp 2

## Accuracy

```{r, include=FALSE}
load("../../UNM07_proc_data.RData")
UNM07_training <- filter(training, !pNum %in% not_passed_pNum$pNum)
UNM07_test <- filter(test, !pNum %in% not_passed_pNum$pNum)

UNM07_test <- UNM07_test %>%
  mutate(trial_type = case_when((target == 1 & distractor == 2) | (target == 2 & distractor == 1) | (target == 3 & distractor == 4) | (target == 4 & distractor == 3) ~ "P-Con" ,
                                (target == 5 & distractor == 6) | (target == 6 & distractor == 5) |  (target == 7 & distractor == 8) | (target == 8 & distractor == 7)~ "NP-Con",
                                (target == 1 & (distractor == 5 | distractor == 6)) | (target == 2 & (distractor == 5 | distractor == 6)) | (target == 3 & (distractor == 7 | distractor == 8)) | (target == 4 & (distractor == 7 | distractor == 8)) ~ "P-Incon",
                                  (target == 5 & (distractor == 1 | distractor == 2)) | (target == 6 & (distractor == 1 | distractor == 2)) | (target == 7 & (distractor == 3 | distractor == 4)) | (target == 8 & (distractor == 3 | distractor == 4)) ~  "NP-Incon"),
         #add a congruence variable
         congruence = case_when ((trial_type == "P-Con") | (trial_type == "NP-Con") ~ "congruent",
                                 (trial_type == "P-Incon") | (trial_type == "NP-Incon") ~ "incongruent"))

#create the PPR measure
UNM07_training <- UNM07_training %>%
  mutate(prob_response = case_when((cue1 == 1 | cue1 == 3) & response == "o1_image" ~ 1,
                                   (cue1 == 1 | cue1 == 3) & response == "o2_image" ~ 0, 
                                   (cue1 == 2 | cue1 == 4) & response == "o1_image" ~ 0,
                                   (cue1 == 2 | cue1 == 4) & response == "o2_image" ~ 1))

#Calculate the mean accuracy and standard error for each block, including the groups
MA_test <- UNM07_test %>%
  group_by(condition, trial_type) %>%
    summarise(mean_acc = mean(acc, na.rm = TRUE), 
            se_acc = sd(acc, na.rm = TRUE)/sqrt(length(acc)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = MA_test, mapping = aes(x = factor(condition, level=c('Uncertain', 'Certain')), y = mean_acc, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(y= mean_acc, ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .2, position = position_dodge(0.9)) +
  coord_cartesian(ylim = c(0, 1))+
  scale_x_discrete (name = "Type of test") +
  scale_y_continuous(name = "Accuracy") +
  coord_cartesian(ylim = c(0.5, 1)) +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
#ANOVA accuracy
acc_UNM07_test <- UNM07_test %>%
  group_by (pNum, condition, predictiveness, congruence) %>%
  summarise(acc = mean(acc, na.rm = TRUE))
acc_UNM07_test$predictiveness <- factor(acc_UNM07_test$predictiveness)
acc_UNM07_test$condition <- factor(acc_UNM07_test$condition)
acc_UNM07_test$pNum <- factor(acc_UNM07_test$pNum)
acc_UNM07_test$congruence<- factor(acc_UNM07_test$congruence)
ANOVA_acc_UNM07_test <- aov_car(formula = acc ~ condition + Error(pNum*predictiveness*congruence), data = acc_UNM07_test)
print(ANOVA_acc_UNM07_test)

bay_ANOVA_acc_UNM07_test <- anovaBF(formula = acc ~ condition*predictiveness*congruence + pNum,
        data = data.frame(acc_UNM07_test),
        whichRandom = "pNum")
print(bay_ANOVA_acc_UNM07_test)

bay_ANOVA_acc_UNM07_test_gxp <- bay_ANOVA_acc_UNM07_test[4]/bay_ANOVA_acc_UNM07_test[3]
print(bay_ANOVA_acc_UNM07_test_gxp)
bay_ANOVA_acc_UNM07_test_pxc <- bay_ANOVA_acc_UNM07_test[13]/bay_ANOVA_acc_UNM07_test[7]
print(bay_ANOVA_acc_UNM07_test_pxc)
bay_ANOVA_acc_UNM07_test_sxc <- bay_ANOVA_acc_UNM07_test[10]/bay_ANOVA_acc_UNM07_test[6]
print(bay_ANOVA_acc_UNM07_test_sxc)
bay_ANOVA_acc_UNM07_test_gxpxc <- bay_ANOVA_acc_UNM07_test[18]/bay_ANOVA_acc_UNM07_test[17]
print(bay_ANOVA_acc_UNM07_test_gxpxc)
```

```{r, include = FALSE}
# SME of the condition:predictiveness interaction
SME_acc_UNM07_test <- UNM07_test %>%
  group_by (pNum, condition, predictiveness) %>%
  summarise(acc = mean(acc, na.rm = TRUE))
#calculate the simple main effect of condition
sme_acc_UNM07_test_condition <- SME_acc_UNM07_test %>%
  group_by(predictiveness) %>%
  anova_test(acc ~ condition, effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_acc_UNM07_test_condition #Call the output table
#calculate the simple main effect of predictiveness
sme_acc_UNM07_test_pred <- SME_acc_UNM07_test %>%
  group_by(condition) %>%
  anova_test(acc ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_acc_UNM07_test_pred #Call the output table
```

There was a significant *group x predictiveness* interaction, *group x predictiveness*, `r apa(ANOVA_acc_UNM07_test, effect = "condition:predictiveness")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test_gxp[1])`; but no other significant differences, *group*: `r apa(ANOVA_acc_UNM07_test, effect = "condition")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test[1])`; *predictiveness*: `r apa(ANOVA_acc_UNM07_test, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test[2])`; *congruence*: `r apa(ANOVA_acc_UNM07_test, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test[5])`; *predictiveness x congruence*: `r apa(ANOVA_acc_UNM07_test, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test_pxc[1])`; *group x congruence*: `r apa(ANOVA_acc_UNM07_test, effect = "condition:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test_sxc[1])`; *group x predictiveness x congruence*: `r apa(ANOVA_acc_UNM07_test, effect = "condition:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM07_test_gxpxc[1])`. Simple main effects analysis showed a significant effect of predictiveness in the group Certain, *F* (`r sme_acc_UNM07_test_pred[1, 3]`, `r sme_acc_UNM07_test_pred[1, 4]`) = `r sme_acc_UNM07_test_pred[1, 5]`, *p* = `r sme_acc_UNM07_test_pred[1, 9]`, $\\eta^2_p$ = `r sme_acc_UNM07_test_pred[1, 8]`, but not on the Uncertain group, *F* (`r sme_acc_UNM07_test_pred[2, 3]`, `r sme_acc_UNM07_test_pred[2, 4]`) = `r sme_acc_UNM07_test_pred[2, 5]`, *p* = `r sme_acc_UNM07_test_pred[2, 9]`, $\\eta^2_p$ = `r sme_acc_UNM07_test_pred[2, 8]`.

## Just correct ratings

```{r, include=FALSE}
#plot test mem_score but take out the errors
M_rat_UNM07_test <- filter(UNM07_test, acc == 1) %>%
  group_by(trial_type, condition) %>%
  summarise(mean_mem_score = mean(mem_score, na.rm = TRUE), 
            se_mem_score = sd(mem_score, na.rm = TRUE)/sqrt(length(mem_score)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = M_rat_UNM07_test, mapping = aes(x = factor(condition, levels = c("Uncertain", "Certain")), y = mean_mem_score, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(ymin = mean_mem_score - se_mem_score, ymax = mean_mem_score + se_mem_score), width=.2, position=position_dodge(0.9)) +
  scale_x_discrete (name = "Group") +
  scale_y_continuous(name = "Ratings") +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
#ANOVA mem_score
rat_UNM07_test <- filter(UNM07_test, acc == 1) %>%
  group_by (pNum, condition, predictiveness, congruence) %>%
  summarise(rat = mean(mem_score, na.rm = TRUE))
rat_UNM07_test$predictiveness <- factor(rat_UNM07_test$predictiveness)
rat_UNM07_test$condition <- factor(rat_UNM07_test$condition)
rat_UNM07_test$pNum <- factor(rat_UNM07_test$pNum)
rat_UNM07_test$congruence <- factor(rat_UNM07_test$congruence)
ANOVA_rat_UNM07_test <- aov_car(formula = rat ~ condition + Error(pNum*predictiveness*congruence), data = rat_UNM07_test)
print(ANOVA_rat_UNM07_test)
```

```{r, include=FALSE}
bay_ANOVA_rat_UNM07_test <- anovaBF(formula = rat ~ condition*predictiveness*congruence + pNum,
        data = data.frame(rat_UNM07_test),
        whichRandom = "pNum")
print(bay_ANOVA_rat_UNM07_test)

```

```{r, include=FALSE}
bay_ANOVA_rat_UNM07_test_gxp <- bay_ANOVA_rat_UNM07_test[4]/bay_ANOVA_rat_UNM07_test[3]
print(bay_ANOVA_rat_UNM07_test_gxp)
bay_ANOVA_rat_UNM07_test_pxc <- bay_ANOVA_rat_UNM07_test[13]/bay_ANOVA_rat_UNM07_test[7]
print(bay_ANOVA_rat_UNM07_test_pxc)
bay_ANOVA_rat_UNM07_test_sxc <- bay_ANOVA_rat_UNM07_test[10]/bay_ANOVA_rat_UNM07_test[6]
print(bay_ANOVA_rat_UNM07_test_sxc)
bay_ANOVA_rat_UNM07_test_gxpxc <- bay_ANOVA_rat_UNM07_test[18]/bay_ANOVA_rat_UNM07_test[17]
print(bay_ANOVA_rat_UNM07_test_gxpxc)
```

```{r, include = FALSE}
# SME of the condition:predictiveness interaction
SME_rat_UNM07_test <- UNM07_test %>%
  group_by (pNum, condition, predictiveness) %>%
  summarise(rat = mean(rating, na.rm = TRUE))
#calculate the simple main effect of condition
sme_rat_UNM07_test_condition <- SME_rat_UNM07_test %>%
  group_by(predictiveness) %>%
  anova_test(rat ~ condition, effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_rat_UNM07_test_condition #Call the output table
#calculate the simple main effect of predictiveness
sme_rat_UNM07_test_pred <- SME_rat_UNM07_test %>%
  group_by(condition) %>%
  anova_test(rat ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_rat_UNM07_test_pred #Call the output table
```

There were no significant effects or interactions, *group*: `r apa(ANOVA_rat_UNM07_test, effect = "condition")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test[1])`; *predictiveness*: `r apa(ANOVA_rat_UNM07_test, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test[2])`; *congruence*: `r apa(ANOVA_rat_UNM07_test, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test[5])`; *group x predictiveness*: `r apa(ANOVA_rat_UNM07_test, effect = "condition:predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test_gxp[1])`; *predictiveness x congruence*: `r apa(ANOVA_rat_UNM07_test, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test_pxc[1])`; *group x congruence*: `r apa(ANOVA_rat_UNM07_test, effect = "condition:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test_sxc[1])`; *group x predictiveness x congruence*: `r apa(ANOVA_rat_UNM07_test, effect = "condition:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_rat_UNM07_test_gxpxc[1])`.

## Memory score

```{r, include=FALSE}
#plot test mem_score but take out the errors
M_mem_UNM07_test <- UNM07_test %>%
  group_by(trial_type, condition) %>%
  summarise(mean_mem_score = mean(c_mem_score, na.rm = TRUE), 
            se_mem_score = sd(mem_score, na.rm = TRUE)/sqrt(length(mem_score)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = M_mem_UNM07_test, mapping = aes(x = factor(condition, levels = c("Uncertain", "Certain")), y = mean_mem_score, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(ymin = mean_mem_score - se_mem_score, ymax = mean_mem_score + se_mem_score), width=.2, position=position_dodge(0.9)) +
  scale_x_discrete (name = "Group") +
  scale_y_continuous(name = "Memory Score") +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
#ANOVA mem_score
mem_UNM07_test <- UNM07_test %>%
  group_by (pNum, condition, predictiveness, congruence) %>%
  summarise(mem = mean(c_mem_score, na.rm = TRUE))
mem_UNM07_test$predictiveness <- factor(mem_UNM07_test$predictiveness)
mem_UNM07_test$condition <- factor(mem_UNM07_test$condition)
mem_UNM07_test$pNum <- factor(mem_UNM07_test$pNum)
mem_UNM07_test$congruence <- factor(mem_UNM07_test$congruence)
ANOVA_mem_UNM07_test <- aov_car(formula = mem ~ condition + Error(pNum*predictiveness*congruence), data = mem_UNM07_test)
print(ANOVA_mem_UNM07_test)
```

```{r, include=FALSE}
bay_ANOVA_mem_UNM07_test <- anovaBF(formula = mem ~ condition*predictiveness*congruence + pNum,
        data = data.frame(mem_UNM07_test),
        whichRandom = "pNum")
print(bay_ANOVA_mem_UNM07_test)

```

```{r, include=FALSE}
bay_ANOVA_mem_UNM07_test_gxp <- bay_ANOVA_mem_UNM07_test[4]/bay_ANOVA_mem_UNM07_test[3]
print(bay_ANOVA_mem_UNM07_test_gxp)
bay_ANOVA_mem_UNM07_test_pxc <- bay_ANOVA_mem_UNM07_test[13]/bay_ANOVA_mem_UNM07_test[7]
print(bay_ANOVA_mem_UNM07_test_pxc)
bay_ANOVA_mem_UNM07_test_sxc <- bay_ANOVA_mem_UNM07_test[10]/bay_ANOVA_mem_UNM07_test[6]
print(bay_ANOVA_mem_UNM07_test_sxc)
bay_ANOVA_mem_UNM07_test_gxpxc <- bay_ANOVA_mem_UNM07_test[18]/bay_ANOVA_mem_UNM07_test[17]
print(bay_ANOVA_mem_UNM07_test_gxpxc)
```

```{r, include = FALSE}
# SME of the condition:predictiveness interaction
SME_mem_UNM07_test <- UNM07_test %>%
  group_by (pNum, condition, predictiveness) %>%
  summarise(mem = mean(c_mem_score, na.rm = TRUE))
#calculate the simple main effect of condition
sme_mem_UNM07_test_condition <- SME_mem_UNM07_test %>%
  group_by(predictiveness) %>%
  anova_test(mem ~ condition, effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_mem_UNM07_test_condition #Call the output table
#calculate the simple main effect of predictiveness
sme_mem_UNM07_test_pred <- SME_mem_UNM07_test %>%
  group_by(condition) %>%
  anova_test(mem ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_mem_UNM07_test_pred #Call the output table
```

There was a significant effect of *predictiveness*, `r apa(ANOVA_mem_UNM07_test, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test[2])`, and a significant *group x predictiveness* interaction, `r apa(ANOVA_mem_UNM07_test, effect = "condition:predictiveness")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test_gxp[1])`. There were no other significant effects or interactions, *group*: `r apa(ANOVA_mem_UNM07_test, effect = "condition")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test[1])`; *congruence*: `r apa(ANOVA_mem_UNM07_test, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test[5])`; *predictiveness x congruence*: `r apa(ANOVA_mem_UNM07_test, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test_pxc[1])`; *group x congruence*: `r apa(ANOVA_mem_UNM07_test, effect = "condition:congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test_sxc[1])`; *group x predictiveness x congruence*: `r apa(ANOVA_mem_UNM07_test, effect = "condition:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM07_test_gxpxc[1])`. Simple main effects showed a significant effect of *predictiveness* on Certain group, *F*(`r sme_mem_UNM07_test_pred[1,3]`, `r sme_mem_UNM07_test_pred[1,4]`) = `r sme_mem_UNM07_test_pred[1,5]`, *p* = `r sme_mem_UNM07_test_pred[1,9]`, $\\eta^2_p$ = `r sme_mem_UNM07_test_pred[1,8]`, but not on group Uncertain, *F*(`r sme_mem_UNM07_test_pred[2,3]`, `r sme_mem_UNM07_test_pred[2,4]`) = `r sme_mem_UNM07_test_pred[2,5]`, *p* = `r sme_mem_UNM07_test_pred[2,9]`, $\\eta^2_p$ = `r sme_mem_UNM07_test_pred[2,8]`.

# Exp 3

```{r, include=FALSE}
load("../../UNM08_proc_data.RData")
UNM08_training <- rbind(stage1, stage2)
UNM08_training <- filter(UNM08_training, !pNum %in% not_passed_pNum$pNum)
UNM08_test <- filter(test, !pNum %in% not_passed_pNum$pNum)

UNM08_test <- UNM08_test %>%
  mutate(trial_type = case_when((target == 1 & distractor == 2) | (target == 2 & distractor == 1) | (target == 3 & distractor == 4) | (target == 4 & distractor == 3) ~ "P-Con" ,
                                (target == 5 & distractor == 6) | (target == 6 & distractor == 5) |  (target == 7 & distractor == 8) | (target == 8 & distractor == 7)~ "NP-Con",
                                (target == 1 & (distractor == 5 | distractor == 6)) | (target == 2 & (distractor == 5 | distractor == 6)) | (target == 3 & (distractor == 7 | distractor == 8)) | (target == 4 & (distractor == 7 | distractor == 8)) ~ "P-Incon",
                                  (target == 5 & (distractor == 1 | distractor == 2)) | (target == 6 & (distractor == 1 | distractor == 2)) | (target == 7 & (distractor == 3 | distractor == 4)) | (target == 8 & (distractor == 3 | distractor == 4)) ~  "NP-Incon"),
         #add a congruence variable
         congruence = case_when ((trial_type == "P-Con") | (trial_type == "NP-Con") ~ "congruent",
                                 (trial_type == "P-Incon") | (trial_type == "NP-Incon") ~ "incongruent"))

#create the PPR measure
UNM08_training <- UNM08_training %>%
  mutate(prob_response = case_when((cue1 == 1 | cue1 == 3) & response == "o1_image" ~ 1,
                                   (cue1 == 1 | cue1 == 3) & response == "o2_image" ~ 0, 
                                   (cue1 == 2 | cue1 == 4) & response == "o1_image" ~ 0,
                                   (cue1 == 2 | cue1 == 4) & response == "o2_image" ~ 1, 
                                   cue1 == "A" & response == "o1_image" ~ 1,
                                   cue1 == "A" & response == "o2_image" ~ 0, 
                                   cue1 == "B" & response == "o1_image" ~ 0,
                                   cue1 == "B" & response == "o2_image" ~ 1))
```

## RT analysis and exclusions

```{r, include=FALSE}
UNM08_test <- UNM08_test %>% 
  mutate(trial = rep(seq(1, 24), (nrow(UNM08_test)/24)))

mean_SDV <- UNM08_test %>%
  summarise(mean = mean(choice_RT),
            sd = sd(choice_RT)) %>%
  mutate(upper_limit = mean + (2.5 * sd),
         lower_limit = mean - (2.5 * sd))

# Calculate mean, sd, and limits by participant
p_mean_SDV <- UNM08_test %>%
  group_by(pNum) %>%
  summarise(mean = mean(choice_RT),
            sd = sd(choice_RT)) %>%
  mutate(upper_limit = mean + (2.5 * sd),
         lower_limit = mean - (2.5 * sd))

#identify participants that deviate in their mean from the mean of the group
p_outliers_RT <- UNM08_test %>% 
  mutate(is_excluded = choice_RT < mean_SDV[[1,4]] | choice_RT > mean_SDV[[1,3]])%>%
  group_by(pNum) %>%
  summarise(n_excluded = sum(is_excluded)) %>% 
  mutate(p_excluded = n_excluded/24)

p_exc <- p_outliers_RT %>% 
  filter(n_excluded>0)

# Join limits back to original data, and filter out the trials beyond the upper and lower limits
UNM08_test_filtered <- UNM08_test %>%
  mutate(is_excluded = choice_RT < mean_SDV[[1,4]] | choice_RT > mean_SDV[[1,3]])%>%
  filter(is_excluded == FALSE)%>%
  filter(!pNum %in% p_exc$pNum)
```

```{r, include=FALSE}
UNM08_test_cRT <- UNM08_test_filtered %>% 
  group_by(pNum, trial) %>% 
  summarise(RT = mean(choice_RT))
```

```{r, echo=FALSE, message=FALSE}
ggplot() +
  geom_boxplot(data = UNM08_test_cRT, mapping = aes(x= trial, y = RT, group = trial))
ggplot() +
  geom_histogram(data = UNM08_test_cRT, mapping = aes(x=RT))
```

```{r, include=FALSE}
UNM08_test_rRT <- UNM08_test_RT %>% 
  group_by(pNum) %>% 
  summarise(RT = mean(rating_RT))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = UNM08_test_rRT, mapping = aes(y = RT)) +
  geom_boxplot()
```

## Accuracy

```{r, include=FALSE}
#Calculate the mean accuracy and standard error for each block, including the groups
MA_UNM08_test <- UNM08_test_filtered %>%
  group_by(trial_type, condition) %>%
    summarise(mean_acc = mean(acc, na.rm = TRUE), 
            se_acc = sd(acc, na.rm = TRUE)/sqrt(length(acc)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = MA_UNM08_test, mapping = aes(x = factor(condition, level=c('Uncertain', 'Certain Short','Certain Long')), y = mean_acc, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(y= mean_acc, ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .2, position = position_dodge(0.9)) +
  coord_cartesian(ylim = c(0, 1))+
  scale_x_discrete (name = "Type of test") +
  scale_y_continuous(name = "Accuracy") +
  coord_cartesian(ylim = c(0.5, 1)) +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
#ANOVA accuracy
acc_UNM08_test <- UNM08_test_filtered %>%
  group_by (pNum, condition, predictiveness, congruence) %>%
  summarise(acc = mean(acc, na.rm = TRUE))
acc_UNM08_test$predictiveness <- factor(acc_UNM08_test$predictiveness)
acc_UNM08_test$condition <- factor(acc_UNM08_test$condition)
acc_UNM08_test$pNum <- factor(acc_UNM08_test$pNum)
acc_UNM08_test$congruence <- factor(acc_UNM08_test$congruence)
ANOVA_acc_UNM08_test <- aov_car(formula = acc ~ condition + Error(pNum*predictiveness*congruence), data = acc_UNM08_test)
print(ANOVA_acc_UNM08_test)

bay_ANOVA_acc_UNM08_test <- anovaBF(formula = acc ~ condition*predictiveness*congruence + pNum,
        data = data.frame(acc_UNM08_test),
        whichRandom = "pNum")
print(bay_ANOVA_acc_UNM08_test)

bay_ANOVA_acc_UNM08_test_gxp <- bay_ANOVA_acc_UNM08_test[4]/bay_ANOVA_acc_UNM08_test[3]
print(bay_ANOVA_acc_UNM08_test_gxp)
bay_ANOVA_acc_UNM08_test_pxc <- bay_ANOVA_acc_UNM08_test[13]/bay_ANOVA_acc_UNM08_test[7]
print(bay_ANOVA_acc_UNM08_test_pxc)
bay_ANOVA_acc_UNM08_test_sxc <- bay_ANOVA_acc_UNM08_test[10]/bay_ANOVA_acc_UNM08_test[6]
print(bay_ANOVA_acc_UNM08_test_sxc)
bay_ANOVA_acc_UNM08_test_gxpxc <- bay_ANOVA_acc_UNM08_test[18]/bay_ANOVA_acc_UNM08_test[17]
print(bay_ANOVA_acc_UNM08_test_gxpxc)
```

```{r, include = FALSE}
# SME of group:predictiveness interaction
SME_acc_UM08_gxp <- UNM08_test_filtered %>%
  group_by (pNum, condition, predictiveness) %>%
  summarise(acc = mean(acc, na.rm = TRUE))
#calculate the simple main effect of condition
SME_acc_UM08_pxc_condition <- SME_acc_UM08_gxp %>%
  group_by(predictiveness) %>%
  anova_test(acc ~ condition, effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
SME_acc_UM08_pxc_condition #Call the output table
#calculate the simple main effect of predictiveness
SME_acc_UM08_gxp_pred <- SME_acc_UM08_gxp %>%
  group_by(condition) %>%
  anova_test(acc ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
SME_acc_UM08_gxp_pred #Call the output table
# SME of predictiveness:congruence interaction
SME_acc_UM08_pxc <- UNM08_test_filtered %>%
  group_by (pNum, congruence, predictiveness) %>%
  summarise(acc = mean(acc, na.rm = TRUE))
#calculate the simple main effect of congruence
SME_acc_UM08_pxc_congruence <- SME_acc_UM08_pxc %>%
  group_by(predictiveness) %>%
  anova_test(acc ~ congruence + Error(pNum/congruence), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
SME_acc_UM08_pxc_congruence #Call the output table
#calculate the simple main effect of predictiveness
SME_acc_UM08_pxc_pred <- SME_acc_UM08_pxc %>%
  group_by(congruence) %>%
  anova_test(acc ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
SME_acc_UM08_pxc_pred #Call the output table
```

There was a significant main effect of the *predictiveness*: `r apa(ANOVA_acc_UNM08_test, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test[2])`, a significant *group x predictiveness* interaction, `r apa(ANOVA_acc_UNM08_test, effect = "condition:predictiveness")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_gxp[1])`, and the *predictiveness x congruence* interaction, `r apa(ANOVA_acc_UNM08_test, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_pxc[1])`. All other effects and interactions were non significant: *group*: `r apa(ANOVA_acc_UNM08_test, effect = "condition")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test[1])`; *congruence*: `r apa(ANOVA_acc_UNM08_test, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test[5])`; *group x congruence*: `r apa(ANOVA_acc_UNM08_test, effect = "condition:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_sxc[1])`; *group x predictiveness x congruence*: `r apa(ANOVA_acc_UNM08_test, effect = "condition:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_gxpxc[1])`. Simple main effects showed an effect in predictiveness in the Certain Long group, *F* (`r SME_acc_UM08_gxp_pred[1,3]`, `r SME_acc_UM08_gxp_pred[1,4]`) = `r SME_acc_UM08_gxp_pred[1,5]`, *p* = `r SME_acc_UM08_gxp_pred[1,9]`, $\\eta^2_p$ = `r SME_acc_UM08_gxp_pred[1,8]`, and on the Certain Short group, *F* (`r SME_acc_UM08_gxp_pred[2,3]`, `r SME_acc_UM08_gxp_pred[2,4]`) = `r SME_acc_UM08_gxp_pred[2,5]`, *p* = `r SME_acc_UM08_gxp_pred[2,9]`, $\\eta^2_p$ = `r SME_acc_UM08_gxp_pred[2,8]`, but not the Uncertain group, *F* (`r SME_acc_UM08_gxp_pred[3,3]`, `r SME_acc_UM08_gxp_pred[3,4]`) = `r SME_acc_UM08_gxp_pred[3,5]`, *p* = `r SME_acc_UM08_gxp_pred[3,9]`, $\\eta^2_p$ = `r SME_acc_UM08_gxp_pred[3,8]`. Also, the simple main effects for the other significant interaction showed an effect in predictiveness in the incongruent trials, *F* (`r SME_acc_UM08_pxc_pred[2,3]`, `r SME_acc_UM08_pxc_pred[2,4]`) = `r SME_acc_UM08_pxc_pred[2,5]`, *p* = `r SME_acc_UM08_pxc_pred[2,9]`, $\\eta^2_p$ = `r SME_acc_UM08_pxc_pred[2,8]`, but not on the congruent trials, *F* (`r SME_acc_UM08_pxc_pred[1,3]`, `r SME_acc_UM08_pxc_pred[1,4]`) = `r SME_acc_UM08_pxc_pred[1,5]`, *p* = `r SME_acc_UM08_pxc_pred[1,9]`, $\\eta^2_p$ = `r SME_acc_UM08_pxc_pred[1,8]`.

## Just correct ratings

```{r, include=FALSE}
#plot test mem_score but take out the errors
M_rat_UNM08_test <- filter(UNM08_test_filtered, acc == 1) %>%
  group_by(trial_type, condition) %>%
  summarise(mean_mem_score = mean(mem_score, na.rm = TRUE), 
            se_mem_score = sd(mem_score, na.rm = TRUE)/sqrt(length(mem_score)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = M_rat_UNM08_test, mapping = aes(x = factor(condition, levels = c("Uncertain", "Certain Short", "Certain Long")), y = mean_mem_score, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(ymin = mean_mem_score - se_mem_score, ymax = mean_mem_score + se_mem_score), width=.2, position=position_dodge(0.9)) +
  scale_x_discrete (name = "Group") +
  scale_y_continuous(name = "Ratings") +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
#ANOVA mem_score
rat_UNM08_test <- filter(UNM08_test_filtered, acc == 1) %>%
  group_by (pNum, condition, predictiveness, congruence) %>%
  summarise(rat = mean(mem_score, na.rm = TRUE))
rat_UNM08_test$predictiveness <- factor(rat_UNM08_test$predictiveness)
rat_UNM08_test$condition <- factor(rat_UNM08_test$condition)
rat_UNM08_test$pNum <- factor(rat_UNM08_test$pNum)
rat_UNM08_test$congruence <- factor(rat_UNM08_test$congruence)
ANOVA_rat_UNM08_test <- aov_car(formula = rat ~ condition + Error(pNum*predictiveness*congruence), data = rat_UNM08_test)
print(ANOVA_rat_UNM08_test)
```

```{r, include=FALSE}
bay_ANOVA_rat_UNM08_test <- anovaBF(formula = rat ~ condition*predictiveness*congruence + pNum,
        data = data.frame(rat_UNM08_test),
        whichRandom = "pNum")
print(bay_ANOVA_rat_UNM08_test)
```

```{r, include=FALSE}
bay_ANOVA_rat_UNM08_test_gxp <- bay_ANOVA_rat_UNM08_test[4]/bay_ANOVA_rat_UNM08_test[3]
print(bay_ANOVA_rat_UNM08_test_gxp)
bay_ANOVA_rat_UNM08_test_pxc <- bay_ANOVA_rat_UNM08_test[13]/bay_ANOVA_rat_UNM08_test[7]
print(bay_ANOVA_rat_UNM08_test_pxc)
bay_ANOVA_rat_UNM08_test_sxc <- bay_ANOVA_rat_UNM08_test[10]/bay_ANOVA_rat_UNM08_test[6]
print(bay_ANOVA_rat_UNM08_test_sxc)
bay_ANOVA_rat_UNM08_test_gxpxc <- bay_ANOVA_rat_UNM08_test[18]/bay_ANOVA_rat_UNM08_test[17]
print(bay_ANOVA_rat_UNM08_test_gxpxc)
```

```{r, include = FALSE}
# SME of group:predictiveness interaction
SME_rat_UM08_gxp <- UNM08_test %>%
  group_by (pNum, condition, predictiveness) %>%
  summarise(rat = mean(rating, na.rm = TRUE))
#calculate the simple main effect of condition
SME_rat_UM08_pxc_condition <- SME_rat_UM08_gxp %>%
  group_by(predictiveness) %>%
  anova_test(rat ~ condition, effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
SME_rat_UM08_pxc_condition #Call the output table
#calculate the simple main effect of predictiveness
SME_rat_UM08_gxp_pred <- SME_rat_UM08_gxp %>%
  group_by(condition) %>%
  anova_test(rat ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
SME_rat_UM08_gxp_pred #Call the output table
```

There was a significant effect *predictiveness*, `r apa(ANOVA_rat_UNM08_test, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_UNM08_test[2])`. No other effect was significant, *group*: `r apa(ANOVA_rat_UNM08_test, effect = "condition")`, `r report_BF_and_error(bay_ANOVA_rat_UNM08_test[1])`; *congruence*, `r apa(ANOVA_acc_UNM08_test, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test[5])`; *group x predictiveness*: `r apa(ANOVA_rat_UNM08_test, effect = "condition:predictiveness")`, `r report_BF_and_error(bay_ANOVA_rat_UNM08_test_gxp[1])`; *predictiveness x congruence*: `r apa(ANOVA_acc_UNM08_test, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_pxc[1])`; *group x congruence*: `r apa(ANOVA_acc_UNM08_test, effect = "condition:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_sxc[1])`; *group x predictiveness x congruence*: `r apa(ANOVA_acc_UNM08_test, effect = "condition:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_acc_UNM08_test_gxpxc[1])`. Is worth noting that the *group x predictiveness* interaction is marginally significant, and that the simple main effects found significant the effect of *predictiveness* in the group Certain Long, *F*(`r SME_rat_UM08_gxp_pred[1,3]`, `r SME_rat_UM08_gxp_pred[1,4]`) = `r SME_rat_UM08_gxp_pred[1,5]`, *p* = `r SME_rat_UM08_gxp_pred[1,9]`, $\\eta^2_p$ = `r SME_rat_UM08_gxp_pred[1,8]`, and in the group Certain Short, *F*(`r SME_rat_UM08_gxp_pred[2,3]`, `r SME_rat_UM08_gxp_pred[2,4]`) = `r SME_rat_UM08_gxp_pred[2,5]`, *p* = `r SME_rat_UM08_gxp_pred[2,9]`, $\\eta^2_p$ = `r SME_rat_UM08_gxp_pred[2,8]`, but not in the group Uncertain, *F*(`r SME_rat_UM08_gxp_pred[3,3]`, `r SME_rat_UM08_gxp_pred[3,4]`) = `r SME_rat_UM08_gxp_pred[3,5]`, *p* = `r SME_rat_UM08_gxp_pred[3,9]`, $\\eta^2_p$ = `r SME_rat_UM08_gxp_pred[3,8]`.

## Memory score

```{r, include=FALSE}
#plot test mem_score but take out the errors
M_mem_UNM08_test <- UNM08_test %>%
  group_by(trial_type, condition) %>%
  summarise(mean_mem_score = mean(c_mem_score, na.rm = TRUE), 
            se_mem_score = sd(mem_score, na.rm = TRUE)/sqrt(length(mem_score)))
```

```{r, echo=FALSE, message=FALSE}
ggplot(data = M_mem_UNM08_test, mapping = aes(x = factor(condition, levels = c("Uncertain", "Certain Long", "Certain Short")), y = mean_mem_score, fill = trial_type)) +
  geom_col(position = position_dodge2()) +
  geom_errorbar(aes(ymin = mean_mem_score - se_mem_score, ymax = mean_mem_score + se_mem_score), width=.2, position=position_dodge(0.9)) +
  scale_x_discrete (name = "Group") +
  scale_y_continuous(name = "Memory Score") +
  scale_fill_discrete(type = c("#7B3294", "#C2A5CF", "#008837", "#A6DBA0"))
```

```{r, include=FALSE}
#ANOVA mem_score
mem_UNM08_test <- UNM08_test %>%
  group_by (pNum, condition, predictiveness, congruence) %>%
  summarise(mem = mean(c_mem_score, na.rm = TRUE))
mem_UNM08_test$predictiveness <- factor(mem_UNM08_test$predictiveness)
mem_UNM08_test$condition <- factor(mem_UNM08_test$condition)
mem_UNM08_test$pNum <- factor(mem_UNM08_test$pNum)
mem_UNM08_test$congruence <- factor(mem_UNM08_test$congruence)
ANOVA_mem_UNM08_test <- aov_car(formula = mem ~ condition + Error(pNum*predictiveness*congruence), data = mem_UNM08_test)
print(ANOVA_mem_UNM08_test)
```

```{r, include=FALSE}
bay_ANOVA_mem_UNM08_test <- anovaBF(formula = mem ~ condition*predictiveness*congruence + pNum,
        data = data.frame(mem_UNM08_test),
        whichRandom = "pNum")
print(bay_ANOVA_mem_UNM08_test)

```

```{r, include=FALSE}
bay_ANOVA_mem_UNM08_test_gxp <- bay_ANOVA_mem_UNM08_test[4]/bay_ANOVA_mem_UNM08_test[3]
print(bay_ANOVA_mem_UNM08_test_gxp)
bay_ANOVA_mem_UNM08_test_pxc <- bay_ANOVA_mem_UNM08_test[13]/bay_ANOVA_mem_UNM08_test[7]
print(bay_ANOVA_mem_UNM08_test_pxc)
bay_ANOVA_mem_UNM08_test_sxc <- bay_ANOVA_mem_UNM08_test[10]/bay_ANOVA_mem_UNM08_test[6]
print(bay_ANOVA_mem_UNM08_test_sxc)
bay_ANOVA_mem_UNM08_test_gxpxc <- bay_ANOVA_mem_UNM08_test[18]/bay_ANOVA_mem_UNM08_test[17]
print(bay_ANOVA_mem_UNM08_test_gxpxc)
```

```{r, include = FALSE}
# SME of the condition:predictiveness interaction
SME_mem_UNM08_test <- UNM08_test %>%
  group_by (pNum, condition, predictiveness) %>%
  summarise(mem = mean(c_mem_score, na.rm = TRUE))
#calculate the simple main effect of condition
sme_mem_UNM08_test_condition <- SME_mem_UNM08_test %>%
  group_by(predictiveness) %>%
  anova_test(mem ~ condition, effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_mem_UNM08_test_condition #Call the output table
#calculate the simple main effect of predictiveness
sme_mem_UNM08_test_pred <- SME_mem_UNM08_test %>%
  group_by(condition) %>%
  anova_test(mem ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_mem_UNM08_test_pred #Call the output table
# SME of the predictiveness:congruence interaction
SME_mem_UNM08_test <- UNM08_test %>%
  group_by (pNum, congruence, predictiveness) %>%
  summarise(mem = mean(c_mem_score, na.rm = TRUE))
#calculate the simple main effect of congruence
sme_mem_UNM08_test_congruence <- SME_mem_UNM08_test %>%
  group_by(predictiveness) %>%
  anova_test(mem ~ congruence + Error(pNum/congruence), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_mem_UNM08_test_congruence #Call the output table
#calculate the simple main effect of predictiveness
sme_mem_UNM08_test_predxc <- SME_mem_UNM08_test %>%
  group_by(congruence) %>%
  anova_test(mem ~ predictiveness + Error(pNum/predictiveness), effect.size = "pes") %>%
  get_anova_table() %>%
  adjust_pvalue(method = "bonferroni")
sme_mem_UNM08_test_predxc #Call the output table
```

There was a significant effect of *predictiveness*, `r apa(ANOVA_mem_UNM08_test, effect = "predictiveness")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test[2])`, as well as a significant *group x predictiveness* interaction, `r apa(ANOVA_mem_UNM08_test, effect = "condition:predictiveness")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test_gxp[1])` and a significant *predictiveness x congruence* interaction, `r apa(ANOVA_mem_UNM08_test, effect = "predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test_pxc[1])`. No other main effects or interactions were significant, *group*: `r apa(ANOVA_mem_UNM08_test, effect = "condition")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test[1])`; *congruence*: `r apa(ANOVA_mem_UNM08_test, effect ="congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test[5])`; *group x congruence*: `r apa(ANOVA_mem_UNM08_test, effect = "condition:congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test_sxc[1])`; *group x predictiveness x congruence*: `r apa(ANOVA_mem_UNM08_test, effect = "condition:predictiveness:congruence")`, `r report_BF_and_error(bay_ANOVA_mem_UNM08_test_gxpxc[1])`. Simple main effects showed a significant effect of *predictiveness* on Certain Long group, *F*(`r sme_mem_UNM08_test_pred[1,3]`, `r sme_mem_UNM08_test_pred[1,4]`) = `r sme_mem_UNM08_test_pred[1,5]`, *p* = `r sme_mem_UNM08_test_pred[1,9]`, $\\eta^2_p$ = `r sme_mem_UNM08_test_pred[1,8]`, and on Certain Short, *F*(`r sme_mem_UNM08_test_pred[2,3]`, `r sme_mem_UNM08_test_pred[2,4]`) = `r sme_mem_UNM08_test_pred[2,5]`, *p* = `r sme_mem_UNM08_test_pred[2,9]`, $\\eta^2_p$ = `r sme_mem_UNM08_test_pred[2,8]`, but not on group Uncertain, *F*(`r sme_mem_UNM08_test_pred[3,3]`, `r sme_mem_UNM08_test_pred[3,4]`) = `r sme_mem_UNM08_test_pred[3,5]`, *p* = `r sme_mem_UNM08_test_pred[3,9]`, $\\eta^2_p$ = `r sme_mem_UNM08_test_pred[3,8]`. Also, there was a significant effect of predictiveness on both incongruent trials, *F*(`r sme_mem_UNM08_test_predxc[2,3]`, `r sme_mem_UNM08_test_predxc[2,4]`) = `r sme_mem_UNM08_test_predxc[2,5]`, *p* = `r sme_mem_UNM08_test_predxc[2,9]`, $\\eta^2_p$ = `r sme_mem_UNM08_test_predxc[2,8]`, and congruent trials, *F*(`r sme_mem_UNM08_test_predxc[1,3]`, `r sme_mem_UNM08_test_predxc[1,4]`) = `r sme_mem_UNM08_test_predxc[1,5]`, *p* = `r sme_mem_UNM08_test_predxc[1,9]`, $\\eta^2_p$ = `r sme_mem_UNM08_test_predxc[1,8]`.
